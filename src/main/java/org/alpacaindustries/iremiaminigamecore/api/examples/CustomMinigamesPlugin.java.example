package com.example.custominigames;

import org.alpacaindustries.iremiaminigame.api.IremiaMinigameAPI;
import org.alpacaindustries.iremiaminigame.api.MinigameAPIProvider;
import org.alpacaindustries.iremiaminigame.api.MinigameEventListener;
import org.alpacaindustries.iremiaminigame.api.factory.MinigameFactory;
import org.alpacaindustries.iremiaminigame.minigame.Minigame;
import org.alpacaindustries.iremiaminigame.minigame.MinigameManager;
import org.bukkit.entity.Player;
import org.bukkit.plugin.java.JavaPlugin;

/**
 * Example external plugin that registers custom minigames
 * This demonstrates how other plugin developers can integrate with the Iremia Minigame System
 */
public class CustomMinigamesPlugin extends JavaPlugin implements MinigameEventListener {

    private IremiaMinigameAPI minigameAPI;

    @Override
    public void onEnable() {
        // Check if the Iremia Minigame Plugin is available
        if (!MinigameAPIProvider.isAPIAvailable()) {
            getLogger().severe("Iremia Minigame Plugin is not available! Disabling...");
            getServer().getPluginManager().disablePlugin(this);
            return;
        }

        // Get the API instance
        minigameAPI = MinigameAPIProvider.getAPI();

        // Register our custom minigame types
        registerMinigameTypes();

        // Register global event listener to hook into all minigame events
        minigameAPI.registerGlobalMinigameListener(this, this);

        getLogger().info("CustomMinigames Plugin enabled! Registered with Iremia Minigame System API v" +
                        minigameAPI.getAPIVersion());
    }

    @Override
    public void onDisable() {
        if (minigameAPI != null) {
            // Unregister our event listener
            minigameAPI.unregisterGlobalMinigameListener(this, this);

            // Unregister our minigame types (optional - done automatically on plugin disable)
            minigameAPI.unregisterMinigameType(this, "customrace");
            minigameAPI.unregisterMinigameType(this, "buildbattle");
        }

        getLogger().info("CustomMinigames Plugin disabled!");
    }

    private void registerMinigameTypes() {
        // Register a custom race minigame
        boolean raceRegistered = minigameAPI.registerMinigameType(
            this,
            "customrace",
            new CustomRaceMinigame.Factory(),
            "Custom Race Game"
        );

        if (raceRegistered) {
            getLogger().info("Successfully registered Custom Race minigame!");
        } else {
            getLogger().warning("Failed to register Custom Race minigame!");
        }

        // Register a build battle minigame
        boolean buildRegistered = minigameAPI.registerMinigameType(
            this,
            "buildbattle",
            new BuildBattleMinigame.Factory(),
            "Build Battle"
        );

        if (buildRegistered) {
            getLogger().info("Successfully registered Build Battle minigame!");
        } else {
            getLogger().warning("Failed to register Build Battle minigame!");
        }
    }

    // Event listener implementations
    @Override
    public void onMinigameCreated(Minigame minigame) {
        getLogger().info("New minigame created: " + minigame.getDisplayName() + " (" + minigame.getId() + ")");
    }

    @Override
    public void onMinigameStart(Minigame minigame) {
        getLogger().info("Minigame started: " + minigame.getDisplayName());

        // Example: Send custom message to all players when any minigame starts
        for (Player player : getServer().getOnlinePlayers()) {
            player.sendMessage("§6[CustomMinigames] §eA minigame has started: " + minigame.getDisplayName());
        }
    }

    @Override
    public void onPlayerJoinMinigame(Player player, Minigame minigame) {
        getLogger().info(player.getName() + " joined minigame: " + minigame.getDisplayName());

        // Example: Give player a welcome item when they join any minigame
        // player.getInventory().addItem(new ItemStack(Material.COMPASS));
    }

    @Override
    public void onPlayerEliminated(Player player, Minigame minigame, String reason) {
        getLogger().info(player.getName() + " was eliminated from " + minigame.getDisplayName() + " (" + reason + ")");

        // Example: Console players when they're eliminated
        player.sendMessage("§c[CustomMinigames] §7Don't worry, you'll get them next time!");
    }

    // Example custom minigame factory
    public static class CustomRaceMinigame extends Minigame {

        public CustomRaceMinigame(String id, String displayName, MinigameManager manager) {
            super(id, displayName, manager);

            // Configure your minigame settings
            setMinPlayers(2);
            setMaxPlayers(10);
            setAllowJoinDuringGame(false);
        }

        @Override
        protected void onStart() {
            super.onStart();

            // Your custom race game logic here
            broadcastMessage(getGamePrefix().append(
                net.kyori.adventure.text.Component.text("Race started! First to the finish wins!")
            ));
        }

        @Override
        protected void onEnd() {
            super.onEnd();

            // Custom cleanup logic
        }

        @Override
        protected void onPlayerJoin(Player player) {
            super.onPlayerJoin(player);

            // Custom player setup
            player.sendMessage("§a[CustomRace] Welcome to the race! Get ready to run!");
        }

        @Override
        protected void onPlayerLeave(Player player) {
            super.onPlayerLeave(player);

            // Custom cleanup for leaving players
        }

        @Override
        protected void onCountdownStart() {
            super.onCountdownStart();

            // Custom countdown logic
        }

        protected net.kyori.adventure.text.Component getGamePrefix() {
            return net.kyori.adventure.text.Component.text("[Custom Race] ",
                   net.kyori.adventure.text.format.NamedTextColor.GREEN);
        }

        public static class Factory implements MinigameFactory {
            @Override
            public Minigame createMinigame(String id, MinigameManager manager) {
                return new CustomRaceMinigame(id, "Custom Race", manager);
            }
        }
    }

    // Another example minigame
    public static class BuildBattleMinigame extends Minigame {

        public BuildBattleMinigame(String id, String displayName, MinigameManager manager) {
            super(id, displayName, manager);

            setMinPlayers(4);
            setMaxPlayers(8);
            setAllowJoinDuringGame(true); // Allow spectators
        }

        // Implement required methods...
        @Override
        protected void onStart() {
            super.onStart();
            // Build battle logic
        }

        @Override
        protected void onEnd() {
            super.onEnd();
        }

        @Override
        protected void onPlayerJoin(Player player) {
            super.onPlayerJoin(player);
        }

        @Override
        protected void onPlayerLeave(Player player) {
            super.onPlayerLeave(player);
        }

        @Override
        protected void onCountdownStart() {
            super.onCountdownStart();
        }

        protected net.kyori.adventure.text.Component getGamePrefix() {
            return net.kyori.adventure.text.Component.text("[Build Battle] ",
                   net.kyori.adventure.text.format.NamedTextColor.BLUE);
        }

        public static class Factory implements MinigameFactory {
            @Override
            public Minigame createMinigame(String id, MinigameManager manager) {
                return new BuildBattleMinigame(id, "Build Battle", manager);
            }
        }
    }
}
