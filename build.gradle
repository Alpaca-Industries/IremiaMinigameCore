import java.text.SimpleDateFormat

plugins {
    id 'com.gradleup.shadow' version '8.3.6'
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
}

group = "org.alpacaindustries.iremiaminigamecore"

static def getTime() {
    SimpleDateFormat sdf = new SimpleDateFormat("yyMMdd-HHmm")
    sdf.setTimeZone(TimeZone.getTimeZone("UTC"))
    return sdf.format(new Date()).toString()
}

// Set version to version property if supplied
String shortVersion = null
if (hasProperty('ver')) {
    if (ver.charAt(0) == "v") {
        shortVersion = ver.substring(1).toUpperCase()
    } else {
        shortVersion = ver.toUpperCase()
    }
}

// If the tag includes "-RC-" or no tag is supplied, append "-SNAPSHOT"
int rcIdx
if (shortVersion == null || shortVersion == "") {
    version = getTime() + "-SNAPSHOT"
} else if ((rcIdx = shortVersion.indexOf("-RC-")) != -1) {
    version = shortVersion.substring(0, rcIdx) + "-SNAPSHOT"
} else {
    version = shortVersion
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

repositories {
    maven {
        name = 'papermc'
        url = 'https://repo.papermc.io/repository/maven-public/'
        content {
            includeModule("io.papermc.paper", "paper-api")
            includeModule("io.papermc", "paperlib")
            includeModule("net.md-5", "bungeecord-chat")
            includeGroup("io.papermc.adventure")
        }
    }

    maven {
        name = 'minecraft'
        url = 'https://libraries.minecraft.net'
        content {
            includeModule("com.mojang", "brigadier")
        }
    }

    mavenCentral()
}

dependencies {
    compileOnly 'io.papermc.paper:paper-api:1.21.5-R0.1-SNAPSHOT'
    compileOnly 'com.github.spotbugs:spotbugs-annotations:4.9.3'
    implementation 'io.papermc:paperlib:1.0.8'
}

processResources {
    filesMatching("**/plugin.yml") {
        expand ( NAME: rootProject.name, VERSION: version, PACKAGE: rootProject.group.toString() )
    }
}



shadowJar {
    archiveClassifier.set('')
    relocate 'io.papermc.lib', 'shadow.io.papermc.paperlib'
    minimize()
}

// Disable jar and replace with shadowJar
jar.enabled = false
assemble.dependsOn(shadowJar)

tasks.register('printProjectName') {
    doLast {
        println rootProject.name
    }
}

tasks.register('release') {
    dependsOn build

    doLast {
        if (!version.endsWith("-SNAPSHOT")) {
            // Rename final JAR to trim off version information
            shadowJar.archiveFile.get().getAsFile()
                    .renameTo(layout.buildDirectory.get().toString() + File.separator + 'libs' + File.separator
                            + rootProject.name + '.jar')
        }
    }
}

tasks.register('fullBuildFlow') {
    dependsOn 'build'
    mustRunAfter 'clean'

    doLast {
        def targetDir = file("E:\\DebugServer\\plugins")

        // Delete all .jar files in the target directory
        fileTree(dir: targetDir, include: '*.jar').files.each { jar ->
            println "Deleting old jar: $jar"
            jar.delete()
        }

        // Get the jar produced by the 'jar' task
        def jarTask = tasks.named('jar').get()
        def jarFile = jarTask.archiveFile.get().asFile

        if (!jarFile.exists()) {
            throw new GradleException("Jar file not found: $jarFile")
        }
        println "Found jar: $jarFile"

        targetDir.mkdirs()

        copy {
            from jarFile
            into targetDir
        }

        def copiedJar = new File(targetDir, jarFile.name)
        println "Jar copied to: $copiedJar"
        if (!copiedJar.exists()) {
            throw new GradleException("Jar was NOT copied correctly!")
        }

        exec {
            workingDir 'E:\\DebugServer'
            commandLine 'cmd', 'start', 'startnogui.bat'
        }
    }
}


tasks.register('buildAndRun') {
    dependsOn 'clean', 'fullBuildFlow'
}
