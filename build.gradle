import java.text.SimpleDateFormat

plugins {
    id 'com.gradleup.shadow' version '8.3.6'
    id 'java'
    id 'maven-publish'
    id 'signing'
}

group = "org.alpacaindustries.iremiaminigamecore"

static def getTime() {
    SimpleDateFormat sdf = new SimpleDateFormat("yyMMdd-HHmm")
    sdf.setTimeZone(TimeZone.getTimeZone("UTC"))
    return sdf.format(new Date()).toString()
}

// Set version to version property if supplied (for GitHub releases or manual builds)
String shortVersion = null
if (hasProperty('ver')) {
    if (ver.charAt(0) == "v") {
        shortVersion = ver.substring(1)
    } else {
        shortVersion = ver
    }
} else if (System.getenv("GITHUB_REF_TYPE") == "tag") {
    // Extract version from GitHub release tag
    String githubRef = System.getenv("GITHUB_REF_NAME")
    if (githubRef != null) {
        if (githubRef.startsWith("v")) {
            shortVersion = githubRef.substring(1)
        } else {
            shortVersion = githubRef
        }
    }
}

// If the tag includes "-RC-" or no tag is supplied, append "-SNAPSHOT"
int rcIdx
if (shortVersion == null || shortVersion == "") {
    version = getTime() + "-SNAPSHOT"
} else if ((rcIdx = shortVersion.indexOf("-RC-")) != -1) {
    version = shortVersion.substring(0, rcIdx) + "-SNAPSHOT"
} else {
    version = shortVersion
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

repositories {
    maven {
        name = 'papermc'
        url = 'https://repo.papermc.io/repository/maven-public/'
        content {
            includeModule("io.papermc.paper", "paper-api")
            includeModule("io.papermc", "paperlib")
            includeModule("net.md-5", "bungeecord-chat")
            includeGroup("io.papermc.adventure")
        }
    }

    maven {
        name = 'minecraft'
        url = 'https://libraries.minecraft.net'
        content {
            includeModule("com.mojang", "brigadier")
        }
    }

    mavenCentral()
}

dependencies {
    compileOnly 'io.papermc.paper:paper-api:1.21.5-R0.1-SNAPSHOT'
    compileOnly 'com.github.spotbugs:spotbugs-annotations:4.9.3'
    implementation 'io.papermc:paperlib:1.0.8'
}

processResources {
    filesMatching("**/plugin.yml") {
        expand ( NAME: rootProject.name, VERSION: version, PACKAGE: rootProject.group.toString() )
    }
}



shadowJar {
    archiveClassifier.set('')
    relocate 'io.papermc.lib', 'shadow.io.papermc.paperlib'
    minimize()
}

// Disable jar and replace with shadowJar
jar.enabled = false
assemble.dependsOn(shadowJar)

tasks.register('printProjectName') {
    doLast {
        println rootProject.name
    }
}

// Removed duplicate release task - using the one defined later

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact shadowJar

            pom {
                name = 'IremiaMinigameCore'
                description = 'A comprehensive API and framework for creating minigames on Minecraft servers'
                url = 'https://github.com/alpacaindustries/iremiaminigamecore'

                licenses {
                    license {
                        name = 'GNU General Public License v3.0'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.html'
                    }
                }

                developers {
                    developer {
                        id = 'greysilly7'
                        name = 'greysilly7'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/alpacaindustries/iremiaminigamecore.git'
                    developerConnection = 'scm:git:ssh://github.com/alpacaindustries/iremiaminigamecore.git'
                    url = 'https://github.com/alpacaindustries/iremiaminigamecore'
                }
            }
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/alpacaindustries/iremiaminigamecore")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }

        // For local publishing during development
        maven {
            name = "LocalRepository"
            url = uri("${buildDir}/repo")
        }
    }
}

// Signing configuration for publishing
signing {
    // Only sign if we have signing keys configured
    required { false } // Disabled for now - enable when you have signing keys
    sign publishing.publications.maven
}

// Add a task to publish to local repository for testing
tasks.register('publishLocal') {
    dependsOn 'publishMavenPublicationToLocalRepositoryRepository'

    doLast {
        println "Published to local repository: ${buildDir}/repo"
        println "You can now test this in other projects by adding:"
        println "  repositories { flatDir { dirs '${buildDir}/repo' } }"
    }
}

// Add a task to publish to GitHub Packages
tasks.register('publishToGitHub') {
    dependsOn 'publishMavenPublicationToGitHubPackagesRepository'

    doLast {
        println "Published to GitHub Packages"
        println "Version: ${version}"
        println "Repository: https://maven.pkg.github.com/alpacaindustries/iremiaminigamecore"
    }
}

// Create a distribution task for releases
tasks.register('dist') {
    dependsOn shadowJar

    doLast {
        def distDir = file("${buildDir}/dist")
        distDir.mkdirs()

        // Copy the shadow jar to dist directory
        copy {
            from shadowJar.archiveFile.get().asFile
            into distDir
            rename { "${rootProject.name}.jar" }
        }

        println "Distribution created in: ${distDir}"
    }
}

tasks.register('release') {
    dependsOn build, dist

    doLast {
        println "========================================"
        println "  Release Build Complete!"
        println "  Version: ${version}"
        println "  Artifact: ${shadowJar.archiveFile.get().asFile.name}"
        println "  Distribution: ${buildDir}/dist/${rootProject.name}.jar"
        println "========================================"
    }
}
